class Book {
    bookId;
    title;
    price;
    amount;
    type;
    isAvailable;
    constructor(bookId, title, price, amount, type, isAvailable = true) {
        this.bookId = bookId;
        this.title = title;
        this.price = price;
        this.amount = amount;
        this.type = type;
        this.isAvailable = isAvailable;
    }
    borrowBook() {
        if (this.amount > 0) {
            this.amount--;
            if (this.amount === 0)
                this.isAvailable = false;
        }
    }
    returnBook() {
        this.amount++;
        if (this.amount > 0)
            this.isAvailable = true;
    }
    getBookId() {
        return this.bookId;
    }
    getTitle() {
        return this.title;
    }
}
class FictionBook extends Book {
    constructor(id, title, price, amount) {
        super(id, title, price, amount, "Ti·ªÉu thuy·∫øt");
    }
    calculateLateFee(daysLate) {
        return daysLate * 5000;
    }
}
class ScienceBook extends Book {
    constructor(id, title, price, amount) {
        super(id, title, price, amount, "Khoa h·ªçc");
    }
    calculateLateFee(daysLate) {
        return daysLate * 10000;
    }
}
class HistoryBook extends Book {
    constructor(id, title, price, amount) {
        super(id, title, price, amount, "L·ªãch s·ª≠");
    }
    calculateLateFee(daysLate) {
        return daysLate * 7000;
    }
}
class Person {
    id;
    name;
    email;
    phone;
    constructor(id, name, email, phone) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.phone = phone;
    }
    getDetails() {
        console.log(`ID: ${this.id}, Name: ${this.name}, Email: ${this.email}, Phone: ${this.phone}`);
    }
    getId() {
        return this.id;
    }
    getName() {
        return this.name;
    }
}
class Borrowing {
    transactionId;
    borrower;
    book;
    days;
    totalCost;
    constructor(transactionId, borrower, book, days, totalCost) {
        this.transactionId = transactionId;
        this.borrower = borrower;
        this.book = book;
        this.days = days;
        this.totalCost = totalCost;
    }
    getDetails() {
        console.log(`M√£ GD: ${this.transactionId}, Ng∆∞·ªùi m∆∞·ª£n: ${this.borrower.getName()}, S√°ch: ${this.book.getTitle()}, Ng√†y m∆∞·ª£n: ${this.days}, T·ªïng ti·ªÅn: ${this.totalCost}`);
    }
}
class Repository {
    items = [];
    add(item) {
        this.items.push(item);
    }
    getAll() {
        return this.items;
    }
    findById(id, key) {
        return this.items.find((item) => item[key] === id);
    }
}
class LibraryManager {
    bookIdCounter = 1;
    borrowerIdCounter = 1;
    transactionIdCounter = 1;
    booksRepo = new Repository();
    borrowersRepo = new Repository();
    borrowingRepo = new Repository();
    addBook() {
        const type = prompt("Lo·∫°i s√°ch (Fiction/Science/History):")?.trim();
        const title = prompt("Ti√™u ƒë·ªÅ s√°ch:");
        const price = parseFloat(prompt("Gi√° thu√™:") || "0");
        const amount = parseInt(prompt("S·ªë l∆∞·ª£ng:") || "1");
        let book;
        if (type === "Fiction") {
            book = new FictionBook(this.bookIdCounter++, title, price, amount);
        }
        else if (type === "Science") {
            book = new ScienceBook(this.bookIdCounter++, title, price, amount);
        }
        else {
            book = new HistoryBook(this.bookIdCounter++, title, price, amount);
        }
        this.booksRepo.add(book);
        alert("Th√™m s√°ch th√†nh c√¥ng!");
    }
    addBorrower() {
        const name = prompt("T√™n ng∆∞·ªùi m∆∞·ª£n:");
        const email = prompt("Email:");
        const phone = prompt("S·ªë ƒëi·ªán tho·∫°i:");
        const person = new Person(this.borrowerIdCounter++, name, email, phone);
        this.borrowersRepo.add(person);
        alert("Th√™m ng∆∞·ªùi m∆∞·ª£n th√†nh c√¥ng!");
        return person;
    }
    borrowBook() {
        const bookId = parseInt(prompt("Nh·∫≠p ID s√°ch mu·ªën m∆∞·ª£n:") || "0");
        const borrowerId = parseInt(prompt("Nh·∫≠p ID ng∆∞·ªùi m∆∞·ª£n:") || "0");
        const days = parseInt(prompt("S·ªë ng√†y m∆∞·ª£n:") || "1");
        const book = this.booksRepo.getAll().find((b) => b.getBookId() === bookId);
        const borrower = this.borrowersRepo
            .getAll()
            .find((b) => b.getId() === borrowerId);
        if (book && borrower && book.isAvailable) {
            book.borrowBook();
            const cost = book.price * days;
            const borrowing = new Borrowing(this.transactionIdCounter++, borrower, book, days, cost);
            this.borrowingRepo.add(borrowing);
            alert("M∆∞·ª£n s√°ch th√†nh c√¥ng!");
        }
        else {
            alert("Kh√¥ng t√¨m th·∫•y s√°ch ho·∫∑c ng∆∞·ªùi m∆∞·ª£n, ho·∫∑c s√°ch ƒë√£ h·∫øt.");
        }
    }
    returnBook() {
        const bookId = parseInt(prompt("Nh·∫≠p ID s√°ch tr·∫£:") || "0");
        const daysLate = parseInt(prompt("S·ªë ng√†y tr·ªÖ:") || "0");
        const book = this.booksRepo.getAll().find((b) => b.getBookId() === bookId);
        if (book) {
            book.returnBook();
            const lateFee = book.calculateLateFee(daysLate);
            alert(`ƒê√£ tr·∫£ s√°ch. Ph√≠ tr·ªÖ l√†: ${lateFee.toLocaleString()} VND`);
        }
        else {
            alert("Kh√¥ng t√¨m th·∫•y s√°ch.");
        }
    }
    listAvailableBooks() {
        const availableBooks = this.booksRepo.getAll().filter((b) => b.isAvailable);
        if (availableBooks.length === 0) {
            alert("Kh√¥ng c√≥ s√°ch n√†o c√≥ th·ªÉ m∆∞·ª£n.");
            return;
        }
        alert("üìö Danh s√°ch s√°ch c√≥ th·ªÉ m∆∞·ª£n:\n" +
            availableBooks
                .map((b) => `- ${b.getTitle()} (ID: ${b.getBookId()})`)
                .join("\n"));
    }
    listBorrowingByCustomer() {
        const id = parseInt(prompt("Nh·∫≠p ID ng∆∞·ªùi m∆∞·ª£n:") || "0");
        const list = this.borrowingRepo
            .getAll()
            .filter((b) => b.borrower.getId() === id);
        if (list.length === 0) {
            alert("Ng∆∞·ªùi n√†y ch∆∞a m∆∞·ª£n s√°ch n√†o.");
            return;
        }
        alert(list
            .map((b) => `M√£ GD: ${b.transactionId}, S√°ch: ${b.book.getTitle()}, Ng√†y m∆∞·ª£n: ${b.days}, T·ªïng ti·ªÅn: ${b.totalCost}`)
            .join("\n"));
    }
    calculateTotalRevenue() {
        return this.borrowingRepo.getAll().reduce((sum, b) => sum + b.totalCost, 0);
    }
    countBooksByType() {
        const grouped = this.booksRepo
            .getAll()
            .reduce((acc, b) => {
            acc[b.type] = (acc[b.type] || 0) + 1;
            return acc;
        }, {});
        if (Object.keys(grouped).length === 0) {
            alert("Ch∆∞a c√≥ s√°ch n√†o.");
            return;
        }
        alert("üìä S·ªë l∆∞·ª£ng s√°ch theo th·ªÉ lo·∫°i:\n" +
            Object.entries(grouped)
                .map(([type, count]) => `${type}: ${count} s√°ch`)
                .join("\n"));
    }
    showAllBorrowers() {
        const all = this.borrowersRepo.getAll();
        if (all.length === 0) {
            alert("Ch∆∞a c√≥ ng∆∞·ªùi m∆∞·ª£n n√†o.");
            return;
        }
        alert(all.map((b) => `ID: ${b.getId()}, Name: ${b.getName()}`).join("\n"));
    }
}
const manager = new LibraryManager();
function menu() {
    while (true) {
        const choice = prompt(`------ TH∆Ø VI·ªÜN ------
1. Th√™m ng∆∞·ªùi m∆∞·ª£n
2. Th√™m s√°ch
3. Cho m∆∞·ª£n s√°ch
4. Hi·ªÉn th·ªã ng∆∞·ªùi m∆∞·ª£n
5. Tr·∫£ s√°ch
6. Danh s√°ch s√°ch c√≥ th·ªÉ m∆∞·ª£n
7. Danh s√°ch s√°ch ƒë√£ m∆∞·ª£n b·ªüi ng∆∞·ªùi
8. T·ªïng doanh thu
9. ƒê·∫øm s√°ch theo th·ªÉ lo·∫°i
0. Tho√°t
Ch·ªçn ch·ª©c nƒÉng:`);
        switch (choice) {
            case "1":
                manager.addBorrower();
                break;
            case "2":
                manager.addBook();
                break;
            case "3":
                manager.borrowBook();
                break;
            case "4":
                manager.showAllBorrowers();
                break;
            case "5":
                manager.returnBook();
                break;
            case "6":
                manager.listAvailableBooks();
                break;
            case "7":
                manager.listBorrowingByCustomer();
                break;
            case "8":
                alert(`T·ªïng doanh thu: ${manager
                    .calculateTotalRevenue()
                    .toLocaleString()} VND`);
                break;
            case "9":
                manager.countBooksByType();
                break;
            case "0":
                alert("Tho√°t ch∆∞∆°ng tr√¨nh.");
                return;
            default:
                alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        }
    }
}
menu();
export {};
